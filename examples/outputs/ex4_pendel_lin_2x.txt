INFO:	########################################
INFO:	####   Analysing System Strucutre   ####
INFO:	########################################
INFO:	Determine system/input dimensions
INFO:	---> system: 6
INFO:	---> input : 1
INFO:	Look for integrator chains
INFO:	---> found: x5 -> x6
INFO:	---> found: x3 -> x4
INFO:	---> found: x1 -> x2 -> u1
1.8.1
0.7.5
0.13.3
INFO:	########################################
INFO:	       ---- First Iteration ----
INFO:	########################################
INFO:	# spline parts: 4
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.001512 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.001660 s]
INFO:	makesteady: x5
TIME:	---> [makesteady() elapsed 0.001030 s]
TIME:	---> [initSplines() elapsed 0.009214 s]
TIME:	---> [getGuess() elapsed 0.000092 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.024795 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 52.249330
INFO:	nIt= 2    res= 20.729403
INFO:	nIt= 3    res= 6.252245
INFO:	nIt= 4    res= 4.692167
INFO:	nIt= 5    res= 4.149367
INFO:	nIt= 6    res= 4.146772
INFO:	nIt= 7    res= 4.146681
INFO:	nIt= 8    res= 4.146674
TIME:	---> [solve() elapsed 0.053483 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.001719 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 3.141592653589793, 0.0, 3.141592653589793, 0.0]
TIME:	---> [simulate() elapsed 0.371866 s]
INFO:	----------------------------------------
INFO:	Ending up with:	 Should Be: 	 Difference:
INFO:	x1 : 0.000075 	 0.000000 	 0.000075
INFO:	x2 : 0.000052 	 0.000000 	 0.000052
INFO:	x3 : 2.947216 	 0.000000 	 2.947216
INFO:	x4 : 6.025083 	 0.000000 	 6.025083
INFO:	x5 : 2.488716 	 0.000000 	 2.488716
INFO:	x6 : 7.669768 	 0.000000 	 7.669768
INFO:	----------------------------------------
INFO:	--> reached desired accuracy: False
INFO:	########################################
INFO:	       ---- Next Iteration ----
INFO:	########################################
INFO:	# spline parts: 8
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.001341 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.001253 s]
INFO:	makesteady: x5
TIME:	---> [makesteady() elapsed 0.001224 s]
TIME:	---> [initSplines() elapsed 0.008510 s]
INFO:	get new guess for spline x3
INFO:	get new guess for spline x5
TIME:	---> [getGuess() elapsed 0.002205 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.027296 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 23.604538
INFO:	nIt= 2    res= 10.376864
INFO:	nIt= 3    res= 6.210460
INFO:	nIt= 4    res= 5.817673
INFO:	nIt= 5    res= 5.784297
INFO:	nIt= 6    res= 5.779175
INFO:	nIt= 7    res= 5.778328
INFO:	nIt= 8    res= 5.778181
INFO:	nIt= 9    res= 5.778154
INFO:	nIt= 10    res= 5.778150
TIME:	---> [solve() elapsed 0.082475 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.001969 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 3.141592653589793, 0.0, 3.141592653589793, 0.0]
TIME:	---> [simulate() elapsed 0.376023 s]
INFO:	----------------------------------------
INFO:	Ending up with:	 Should Be: 	 Difference:
INFO:	x1 : 0.000015 	 0.000000 	 0.000015
INFO:	x2 : 0.000025 	 0.000000 	 0.000025
INFO:	x3 : 2.986790 	 0.000000 	 2.986790
INFO:	x4 : 6.128221 	 0.000000 	 6.128221
INFO:	x5 : -5.163809 	 0.000000 	 5.163809
INFO:	x6 : -7.807009 	 0.000000 	 7.807009
INFO:	----------------------------------------
INFO:	--> reached desired accuracy: False
INFO:	########################################
INFO:	       ---- Next Iteration ----
INFO:	########################################
INFO:	# spline parts: 16
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.002025 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.001310 s]
INFO:	makesteady: x5
TIME:	---> [makesteady() elapsed 0.002055 s]
TIME:	---> [initSplines() elapsed 0.012860 s]
INFO:	get new guess for spline x3
INFO:	get new guess for spline x5
TIME:	---> [getGuess() elapsed 0.004496 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.043735 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 13.518690
INFO:	nIt= 2    res= 6.821788
INFO:	nIt= 3    res= 5.569981
INFO:	nIt= 4    res= 5.324994
INFO:	nIt= 5    res= 5.320264
INFO:	nIt= 6    res= 5.319909
INFO:	nIt= 7    res= 5.319872
INFO:	nIt= 8    res= 5.319863
TIME:	---> [solve() elapsed 0.108202 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.002777 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 3.141592653589793, 0.0, 3.141592653589793, 0.0]
TIME:	---> [simulate() elapsed 0.368501 s]
INFO:	----------------------------------------
INFO:	Ending up with:	 Should Be: 	 Difference:
INFO:	x1 : 0.000013 	 0.000000 	 0.000013
INFO:	x2 : 0.000015 	 0.000000 	 0.000015
INFO:	x3 : 0.732024 	 0.000000 	 0.732024
INFO:	x4 : 2.298650 	 0.000000 	 2.298650
INFO:	x5 : -0.679353 	 0.000000 	 0.679353
INFO:	x6 : -2.916474 	 0.000000 	 2.916474
INFO:	----------------------------------------
INFO:	--> reached desired accuracy: False
INFO:	########################################
INFO:	       ---- Next Iteration ----
INFO:	########################################
INFO:	# spline parts: 32
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.004356 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.001254 s]
INFO:	makesteady: x5
TIME:	---> [makesteady() elapsed 0.004077 s]
TIME:	---> [initSplines() elapsed 0.021832 s]
INFO:	get new guess for spline x3
INFO:	get new guess for spline x5
TIME:	---> [getGuess() elapsed 0.010515 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.087856 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 7.151819
INFO:	nIt= 2    res= 5.116450
INFO:	nIt= 3    res= 4.570023
INFO:	nIt= 4    res= 3.845207
INFO:	nIt= 5    res= 3.594195
INFO:	nIt= 6    res= 3.498349
INFO:	nIt= 7    res= 3.488202
INFO:	nIt= 8    res= 3.487909
INFO:	nIt= 9    res= 3.487599
INFO:	nIt= 10    res= 3.487468
INFO:	nIt= 11    res= 3.487421
INFO:	nIt= 12    res= 3.487404
INFO:	nIt= 13    res= 3.487397
TIME:	---> [solve() elapsed 0.372942 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.003912 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 3.141592653589793, 0.0, 3.141592653589793, 0.0]
TIME:	---> [simulate() elapsed 0.382619 s]
INFO:	----------------------------------------
INFO:	Ending up with:	 Should Be: 	 Difference:
INFO:	x1 : -0.000029 	 0.000000 	 0.000029
INFO:	x2 : -0.000024 	 0.000000 	 0.000024
INFO:	x3 : 0.561234 	 0.000000 	 0.561234
INFO:	x4 : 2.121492 	 0.000000 	 2.121492
INFO:	x5 : -0.702492 	 0.000000 	 0.702492
INFO:	x6 : -2.864136 	 0.000000 	 2.864136
INFO:	----------------------------------------
INFO:	--> reached desired accuracy: False
INFO:	########################################
INFO:	       ---- Next Iteration ----
INFO:	########################################
INFO:	# spline parts: 64
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.015196 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.001416 s]
INFO:	makesteady: x5
TIME:	---> [makesteady() elapsed 0.013750 s]
TIME:	---> [initSplines() elapsed 0.054180 s]
INFO:	get new guess for spline x3
INFO:	get new guess for spline x5
TIME:	---> [getGuess() elapsed 0.023874 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.226958 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 5.600862
INFO:	nIt= 2    res= 3.662414
INFO:	nIt= 3    res= 3.011561
INFO:	nIt= 4    res= 2.634093
INFO:	nIt= 5    res= 2.360279
INFO:	nIt= 6    res= 2.300401
INFO:	nIt= 7    res= 2.294166
INFO:	nIt= 8    res= 2.294021
INFO:	nIt= 9    res= 2.293863
INFO:	nIt= 10    res= 2.293809
INFO:	nIt= 11    res= 2.293783
INFO:	nIt= 12    res= 2.293772
INFO:	nIt= 13    res= 2.293766
TIME:	---> [solve() elapsed 0.955191 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.006428 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 3.141592653589793, 0.0, 3.141592653589793, 0.0]
TIME:	---> [simulate() elapsed 0.388421 s]
INFO:	----------------------------------------
INFO:	Ending up with:	 Should Be: 	 Difference:
INFO:	x1 : 0.000051 	 0.000000 	 0.000051
INFO:	x2 : 0.000042 	 0.000000 	 0.000042
INFO:	x3 : 0.163329 	 0.000000 	 0.163329
INFO:	x4 : 0.620544 	 0.000000 	 0.620544
INFO:	x5 : -0.185118 	 0.000000 	 0.185118
INFO:	x6 : -0.808974 	 0.000000 	 0.808974
INFO:	----------------------------------------
INFO:	--> reached desired accuracy: False
INFO:	########################################
INFO:	       ---- Next Iteration ----
INFO:	########################################
INFO:	# spline parts: 128
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.069503 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.001377 s]
INFO:	makesteady: x5
TIME:	---> [makesteady() elapsed 0.069784 s]
TIME:	---> [initSplines() elapsed 0.182190 s]
INFO:	get new guess for spline x3
INFO:	get new guess for spline x5
TIME:	---> [getGuess() elapsed 0.064777 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.697965 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 3.512452
INFO:	nIt= 2    res= 2.646730
INFO:	nIt= 3    res= 1.854943
INFO:	nIt= 4    res= 1.540435
INFO:	nIt= 5    res= 1.294669
INFO:	nIt= 6    res= 1.030944
INFO:	nIt= 7    res= 0.913568
INFO:	nIt= 8    res= 0.896279
INFO:	nIt= 9    res= 0.895536
TIME:	---> [solve() elapsed 2.219815 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.011429 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 3.141592653589793, 0.0, 3.141592653589793, 0.0]
TIME:	---> [simulate() elapsed 0.385517 s]
INFO:	----------------------------------------
INFO:	Ending up with:	 Should Be: 	 Difference:
INFO:	x1 : -0.000028 	 0.000000 	 0.000028
INFO:	x2 : -0.000022 	 0.000000 	 0.000022
INFO:	x3 : 0.015748 	 0.000000 	 0.015748
INFO:	x4 : 0.060611 	 0.000000 	 0.060611
INFO:	x5 : 0.004505 	 0.000000 	 0.004505
INFO:	x6 : 0.022724 	 0.000000 	 0.022724
INFO:	----------------------------------------
INFO:	--> reached desired accuracy: True
TIME:	---> [Iteration() elapsed 7.600188 s]
