INFO:	########################################
INFO:	####   Analysing System Strucutre   ####
INFO:	########################################
INFO:	Looking for integrator chains
INFO:	found integrator chain: x6 -> x5
INFO:	found integrator chain: x4 -> x3
INFO:	found integrator chain: u1 -> x2 -> x1
1.8.0
0.7.5
0.13.3
INFO:	########################################
INFO:	       ---- First Iteration ----
INFO:	########################################
INFO:	# spline parts: 4
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.002155 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.001672 s]
INFO:	makesteady: x5
TIME:	---> [makesteady() elapsed 0.001036 s]
TIME:	---> [initSplines() elapsed 0.009432 s]
TIME:	---> [getGuess() elapsed 0.000087 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.026155 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 52.249330
INFO:	nIt= 2    res= 20.729403
INFO:	nIt= 3    res= 6.252245
INFO:	nIt= 4    res= 4.692167
INFO:	nIt= 5    res= 4.149367
INFO:	nIt= 6    res= 4.146772
INFO:	nIt= 7    res= 4.146681
INFO:	nIt= 8    res= 4.146674
TIME:	---> [solve() elapsed 0.049361 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.002287 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 3.141592653589793, 0.0, 3.141592653589793, 0.0]
INFO:	----------------------------------------
TIME:	---> [simulate() elapsed 0.402941 s]
INFO:	Difference:
INFO:	x1 : -0.000075
INFO:	x2 : -0.000052
INFO:	x3 : -2.947216
INFO:	x4 : -6.025083
INFO:	x5 : -2.488716
INFO:	x6 : -7.669768
INFO:	--> reached desired accuracy: False
INFO:	########################################
INFO:	       ---- Next Iteration ----
INFO:	########################################
INFO:	# spline parts: 8
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.001576 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.005711 s]
INFO:	makesteady: x5
TIME:	---> [makesteady() elapsed 0.001488 s]
TIME:	---> [initSplines() elapsed 0.014704 s]
INFO:	get new guess for spline x3
INFO:	get new guess for spline x5
TIME:	---> [getGuess() elapsed 0.002393 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.040044 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 23.604538
INFO:	nIt= 2    res= 10.376864
INFO:	nIt= 3    res= 6.210460
INFO:	nIt= 4    res= 5.817673
INFO:	nIt= 5    res= 5.784297
INFO:	nIt= 6    res= 5.779175
INFO:	nIt= 7    res= 5.778328
INFO:	nIt= 8    res= 5.778181
INFO:	nIt= 9    res= 5.778154
INFO:	nIt= 10    res= 5.778150
TIME:	---> [solve() elapsed 0.106841 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.003054 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 3.141592653589793, 0.0, 3.141592653589793, 0.0]
INFO:	----------------------------------------
TIME:	---> [simulate() elapsed 0.430767 s]
INFO:	Difference:
INFO:	x1 : -0.000015
INFO:	x2 : -0.000025
INFO:	x3 : -2.986790
INFO:	x4 : -6.128221
INFO:	x5 : 5.163809
INFO:	x6 : 7.807009
INFO:	--> reached desired accuracy: False
INFO:	########################################
INFO:	       ---- Next Iteration ----
INFO:	########################################
INFO:	# spline parts: 16
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.002453 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.001228 s]
INFO:	makesteady: x5
TIME:	---> [makesteady() elapsed 0.002326 s]
TIME:	---> [initSplines() elapsed 0.014381 s]
INFO:	get new guess for spline x3
INFO:	get new guess for spline x5
TIME:	---> [getGuess() elapsed 0.004374 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.043851 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 13.518690
INFO:	nIt= 2    res= 6.821788
INFO:	nIt= 3    res= 5.569981
INFO:	nIt= 4    res= 5.324994
INFO:	nIt= 5    res= 5.320264
INFO:	nIt= 6    res= 5.319909
INFO:	nIt= 7    res= 5.319872
INFO:	nIt= 8    res= 5.319863
TIME:	---> [solve() elapsed 0.100058 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.003178 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 3.141592653589793, 0.0, 3.141592653589793, 0.0]
INFO:	----------------------------------------
TIME:	---> [simulate() elapsed 0.365679 s]
INFO:	Difference:
INFO:	x1 : -0.000013
INFO:	x2 : -0.000015
INFO:	x3 : -0.732024
INFO:	x4 : -2.298650
INFO:	x5 : 0.679353
INFO:	x6 : 2.916474
INFO:	--> reached desired accuracy: False
INFO:	########################################
INFO:	       ---- Next Iteration ----
INFO:	########################################
INFO:	# spline parts: 32
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.004606 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.001220 s]
INFO:	makesteady: x5
TIME:	---> [makesteady() elapsed 0.004241 s]
TIME:	---> [initSplines() elapsed 0.023249 s]
INFO:	get new guess for spline x3
INFO:	get new guess for spline x5
TIME:	---> [getGuess() elapsed 0.009590 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.083255 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 7.151819
INFO:	nIt= 2    res= 5.116450
INFO:	nIt= 3    res= 4.570023
INFO:	nIt= 4    res= 3.845207
INFO:	nIt= 5    res= 3.594195
INFO:	nIt= 6    res= 3.498349
INFO:	nIt= 7    res= 3.488202
INFO:	nIt= 8    res= 3.487909
INFO:	nIt= 9    res= 3.487599
INFO:	nIt= 10    res= 3.487468
INFO:	nIt= 11    res= 3.487421
INFO:	nIt= 12    res= 3.487404
INFO:	nIt= 13    res= 3.487397
TIME:	---> [solve() elapsed 0.347092 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.004702 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 3.141592653589793, 0.0, 3.141592653589793, 0.0]
INFO:	----------------------------------------
TIME:	---> [simulate() elapsed 0.373213 s]
INFO:	Difference:
INFO:	x1 : 0.000029
INFO:	x2 : 0.000024
INFO:	x3 : -0.561234
INFO:	x4 : -2.121492
INFO:	x5 : 0.702492
INFO:	x6 : 2.864136
INFO:	--> reached desired accuracy: False
INFO:	########################################
INFO:	       ---- Next Iteration ----
INFO:	########################################
INFO:	# spline parts: 64
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.014096 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.001314 s]
INFO:	makesteady: x5
TIME:	---> [makesteady() elapsed 0.014530 s]
TIME:	---> [initSplines() elapsed 0.052065 s]
INFO:	get new guess for spline x3
INFO:	get new guess for spline x5
TIME:	---> [getGuess() elapsed 0.022308 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.200891 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 5.600862
INFO:	nIt= 2    res= 3.662414
INFO:	nIt= 3    res= 3.011561
INFO:	nIt= 4    res= 2.634093
INFO:	nIt= 5    res= 2.360279
INFO:	nIt= 6    res= 2.300401
INFO:	nIt= 7    res= 2.294166
INFO:	nIt= 8    res= 2.294021
INFO:	nIt= 9    res= 2.293863
INFO:	nIt= 10    res= 2.293809
INFO:	nIt= 11    res= 2.293783
INFO:	nIt= 12    res= 2.293772
INFO:	nIt= 13    res= 2.293766
TIME:	---> [solve() elapsed 0.911671 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.007009 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 3.141592653589793, 0.0, 3.141592653589793, 0.0]
INFO:	----------------------------------------
TIME:	---> [simulate() elapsed 0.386365 s]
INFO:	Difference:
INFO:	x1 : -0.000051
INFO:	x2 : -0.000042
INFO:	x3 : -0.163329
INFO:	x4 : -0.620544
INFO:	x5 : 0.185118
INFO:	x6 : 0.808974
INFO:	--> reached desired accuracy: False
INFO:	########################################
INFO:	       ---- Next Iteration ----
INFO:	########################################
INFO:	# spline parts: 128
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.069484 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.001435 s]
INFO:	makesteady: x5
TIME:	---> [makesteady() elapsed 0.070218 s]
TIME:	---> [initSplines() elapsed 0.183793 s]
INFO:	get new guess for spline x3
INFO:	get new guess for spline x5
TIME:	---> [getGuess() elapsed 0.057808 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.662176 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 3.512452
INFO:	nIt= 2    res= 2.646730
INFO:	nIt= 3    res= 1.854943
INFO:	nIt= 4    res= 1.540435
INFO:	nIt= 5    res= 1.294669
INFO:	nIt= 6    res= 1.030944
INFO:	nIt= 7    res= 0.913568
INFO:	nIt= 8    res= 0.896279
INFO:	nIt= 9    res= 0.895536
TIME:	---> [solve() elapsed 2.246065 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.012158 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 3.141592653589793, 0.0, 3.141592653589793, 0.0]
INFO:	----------------------------------------
TIME:	---> [simulate() elapsed 0.373619 s]
INFO:	Difference:
INFO:	x1 : 0.000028
INFO:	x2 : 0.000022
INFO:	x3 : -0.015748
INFO:	x4 : -0.060611
INFO:	x5 : -0.004505
INFO:	x6 : -0.022724
INFO:	--> reached desired accuracy: True
TIME:	---> [Iteration() elapsed 7.580187 s]
0
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
