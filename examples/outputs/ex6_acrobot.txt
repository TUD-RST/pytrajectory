INFO:	########################################
INFO:	####   Analysing System Strucutre   ####
INFO:	########################################
INFO:	Determine system/input dimensions
INFO:	---> system: 4
INFO:	---> input : 1
INFO:	Look for integrator chains
INFO:	---> found: x3 -> x4
INFO:	---> found: x1 -> x2 -> u1
1.8.1
0.7.5
0.13.3
INFO:	########################################
INFO:	       ---- First Iteration ----
INFO:	########################################
INFO:	# spline parts: 4
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.001438 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.001656 s]
TIME:	---> [initSplines() elapsed 0.006490 s]
TIME:	---> [getGuess() elapsed 0.000078 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.055857 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 28.057737
INFO:	nIt= 2    res= 23.859378
INFO:	nIt= 3    res= 16.326517
INFO:	nIt= 4    res= 4.834037
INFO:	nIt= 5    res= 1.960344
INFO:	nIt= 6    res= 1.105621
INFO:	nIt= 7    res= 0.377431
INFO:	nIt= 8    res= 0.029448
INFO:	nIt= 9    res= 0.000369
INFO:	nIt= 10    res= 0.000002
TIME:	---> [solve() elapsed 0.069878 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.001054 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 4.71238898038469, 0.0]
TIME:	---> [simulate() elapsed 0.332030 s]
INFO:	----------------------------------------
INFO:	Ending up with:	 Should Be: 	 Difference:
INFO:	x1 : -0.000128 	 0.000000 	 0.000128
INFO:	x2 : -0.000337 	 0.000000 	 0.000337
INFO:	x3 : 2.055069 	 1.570796 	 0.484273
INFO:	x4 : 1.114658 	 0.000000 	 1.114658
INFO:	----------------------------------------
INFO:	--> reached desired accuracy: False
INFO:	########################################
INFO:	       ---- Next Iteration ----
INFO:	########################################
INFO:	# spline parts: 8
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.001346 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.001218 s]
TIME:	---> [initSplines() elapsed 0.005478 s]
INFO:	get new guess for spline x3
TIME:	---> [getGuess() elapsed 0.001170 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.038507 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 45.213366
INFO:	nIt= 2    res= 31.769395
INFO:	nIt= 3    res= 15.638562
INFO:	nIt= 4    res= 8.208592
INFO:	nIt= 5    res= 4.669730
INFO:	nIt= 6    res= 3.786669
INFO:	nIt= 7    res= 3.776233
INFO:	nIt= 8    res= 3.776212
INFO:	nIt= 9    res= 3.776212
TIME:	---> [solve() elapsed 0.084816 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.001173 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 4.71238898038469, 0.0]
TIME:	---> [simulate() elapsed 0.345222 s]
INFO:	----------------------------------------
INFO:	Ending up with:	 Should Be: 	 Difference:
INFO:	x1 : 0.000003 	 0.000000 	 0.000003
INFO:	x2 : 0.000018 	 0.000000 	 0.000018
INFO:	x3 : 2.006220 	 1.570796 	 0.435424
INFO:	x4 : 1.270707 	 0.000000 	 1.270707
INFO:	----------------------------------------
INFO:	--> reached desired accuracy: False
INFO:	########################################
INFO:	       ---- Next Iteration ----
INFO:	########################################
INFO:	# spline parts: 16
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.002040 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.001230 s]
TIME:	---> [initSplines() elapsed 0.007407 s]
INFO:	get new guess for spline x3
TIME:	---> [getGuess() elapsed 0.002314 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.048128 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 54.207255
INFO:	nIt= 2    res= 23.327975
INFO:	nIt= 3    res= 15.890874
INFO:	nIt= 4    res= 5.789793
INFO:	nIt= 5    res= 3.819422
INFO:	nIt= 6    res= 3.202029
INFO:	nIt= 7    res= 3.198475
INFO:	nIt= 8    res= 3.198444
INFO:	nIt= 9    res= 3.198444
TIME:	---> [solve() elapsed 0.137108 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.001517 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 4.71238898038469, 0.0]
TIME:	---> [simulate() elapsed 0.320191 s]
INFO:	----------------------------------------
INFO:	Ending up with:	 Should Be: 	 Difference:
INFO:	x1 : 0.000027 	 0.000000 	 0.000027
INFO:	x2 : 0.000018 	 0.000000 	 0.000018
INFO:	x3 : 1.618168 	 1.570796 	 0.047371
INFO:	x4 : -0.054441 	 0.000000 	 0.054441
INFO:	----------------------------------------
INFO:	--> reached desired accuracy: False
INFO:	########################################
INFO:	       ---- Next Iteration ----
INFO:	########################################
INFO:	# spline parts: 32
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.004236 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.001273 s]
TIME:	---> [initSplines() elapsed 0.011930 s]
INFO:	get new guess for spline x3
TIME:	---> [getGuess() elapsed 0.004950 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.071855 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 7.614795
INFO:	nIt= 2    res= 5.195577
INFO:	nIt= 3    res= 4.196053
INFO:	nIt= 4    res= 3.491790
INFO:	nIt= 5    res= 3.031373
INFO:	nIt= 6    res= 2.680280
INFO:	nIt= 7    res= 2.564609
INFO:	nIt= 8    res= 2.500357
INFO:	nIt= 9    res= 2.478780
INFO:	nIt= 10    res= 2.472679
INFO:	nIt= 11    res= 2.470821
INFO:	nIt= 12    res= 2.468752
INFO:	nIt= 13    res= 2.467975
INFO:	nIt= 14    res= 2.467243
INFO:	nIt= 15    res= 2.466375
INFO:	nIt= 16    res= 2.466089
INFO:	nIt= 17    res= 2.466014
INFO:	nIt= 18    res= 2.465983
INFO:	nIt= 19    res= 2.465968
INFO:	nIt= 20    res= 2.465956
TIME:	---> [solve() elapsed 0.602040 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.002160 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 4.71238898038469, 0.0]
TIME:	---> [simulate() elapsed 0.322227 s]
INFO:	----------------------------------------
INFO:	Ending up with:	 Should Be: 	 Difference:
INFO:	x1 : 0.000183 	 0.000000 	 0.000183
INFO:	x2 : 0.000275 	 0.000000 	 0.000275
INFO:	x3 : 1.753307 	 1.570796 	 0.182511
INFO:	x4 : 0.572681 	 0.000000 	 0.572681
INFO:	----------------------------------------
INFO:	--> reached desired accuracy: False
INFO:	########################################
INFO:	       ---- Next Iteration ----
INFO:	########################################
INFO:	# spline parts: 64
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.013894 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.001309 s]
TIME:	---> [initSplines() elapsed 0.026451 s]
INFO:	get new guess for spline x3
TIME:	---> [getGuess() elapsed 0.011749 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.140763 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 3.493629
INFO:	nIt= 2    res= 2.177582
INFO:	nIt= 3    res= 1.721908
INFO:	nIt= 4    res= 1.678256
INFO:	nIt= 5    res= 1.546217
INFO:	nIt= 6    res= 1.512307
INFO:	nIt= 7    res= 1.469517
INFO:	nIt= 8    res= 1.461046
INFO:	nIt= 9    res= 1.452222
INFO:	nIt= 10    res= 1.447904
INFO:	nIt= 11    res= 1.444152
INFO:	nIt= 12    res= 1.441805
INFO:	nIt= 13    res= 1.439945
INFO:	nIt= 14    res= 1.438688
INFO:	nIt= 15    res= 1.437667
INFO:	nIt= 16    res= 1.436909
INFO:	nIt= 17    res= 1.436478
INFO:	nIt= 18    res= 1.435647
INFO:	nIt= 19    res= 1.435241
INFO:	nIt= 20    res= 1.434890
TIME:	---> [solve() elapsed 1.266383 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.003349 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 4.71238898038469, 0.0]
TIME:	---> [simulate() elapsed 0.318320 s]
INFO:	----------------------------------------
INFO:	Ending up with:	 Should Be: 	 Difference:
INFO:	x1 : -0.000144 	 0.000000 	 0.000144
INFO:	x2 : -0.000098 	 0.000000 	 0.000098
INFO:	x3 : 1.595618 	 1.570796 	 0.024822
INFO:	x4 : 0.075487 	 0.000000 	 0.075487
INFO:	----------------------------------------
INFO:	--> reached desired accuracy: False
INFO:	########################################
INFO:	       ---- Next Iteration ----
INFO:	########################################
INFO:	# spline parts: 128
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.069029 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.001402 s]
TIME:	---> [initSplines() elapsed 0.092492 s]
INFO:	get new guess for spline x3
TIME:	---> [getGuess() elapsed 0.031428 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.359407 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 1.711824
INFO:	nIt= 2    res= 1.290749
INFO:	nIt= 3    res= 0.746283
INFO:	nIt= 4    res= 0.484502
INFO:	nIt= 5    res= 0.465261
INFO:	nIt= 6    res= 0.462893
TIME:	---> [solve() elapsed 0.932778 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.005917 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 4.71238898038469, 0.0]
TIME:	---> [simulate() elapsed 0.316269 s]
INFO:	----------------------------------------
INFO:	Ending up with:	 Should Be: 	 Difference:
INFO:	x1 : -0.000033 	 0.000000 	 0.000033
INFO:	x2 : 0.000054 	 0.000000 	 0.000054
INFO:	x3 : 1.569673 	 1.570796 	 0.001123
INFO:	x4 : -0.003772 	 0.000000 	 0.003772
INFO:	----------------------------------------
INFO:	--> reached desired accuracy: True
TIME:	---> [Iteration elapsed 5.981592 s]
