INFO:	########################################
INFO:	####   Analysing System Strucutre   ####
INFO:	########################################
INFO:	Looking for integrator chains
INFO:	found integrator chain: x4 -> x3
INFO:	found integrator chain: u1 -> x2 -> x1
1.8.0
0.7.5
0.13.3
INFO:	########################################
INFO:	       ---- First Iteration ----
INFO:	########################################
INFO:	# spline parts: 5
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.001540 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.002759 s]
TIME:	---> [initSplines() elapsed 0.010082 s]
TIME:	---> [getGuess() elapsed 0.000073 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.019946 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 31.891262
INFO:	nIt= 2    res= 0.711197
INFO:	nIt= 3    res= 0.004939
INFO:	nIt= 4    res= 0.000042
TIME:	---> [solve() elapsed 0.022824 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.001720 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 1.2566370614359172, 0.0]
INFO:	----------------------------------------
TIME:	---> [simulate() elapsed 0.282431 s]
INFO:	Difference:
INFO:	x1 : 0.000010
INFO:	x2 : 0.000007
INFO:	x3 : 0.300458
INFO:	x4 : -0.089492
INFO:	--> reached desired accuracy: False
INFO:	########################################
INFO:	       ---- Next Iteration ----
INFO:	########################################
INFO:	# spline parts: 15
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.002417 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.002055 s]
TIME:	---> [initSplines() elapsed 0.009651 s]
INFO:	get new guess for spline x3
TIME:	---> [getGuess() elapsed 0.002069 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.028428 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 3.221707
INFO:	nIt= 2    res= 1.818138
INFO:	nIt= 3    res= 1.784770
INFO:	nIt= 4    res= 1.756769
INFO:	nIt= 5    res= 1.729311
INFO:	nIt= 6    res= 1.701781
INFO:	nIt= 7    res= 1.674943
INFO:	nIt= 8    res= 1.649455
INFO:	nIt= 9    res= 1.625425
INFO:	nIt= 10    res= 1.602561
INFO:	nIt= 11    res= 1.580404
INFO:	nIt= 12    res= 1.558452
INFO:	nIt= 13    res= 1.536251
INFO:	nIt= 14    res= 1.513498
INFO:	nIt= 15    res= 1.490211
INFO:	nIt= 16    res= 1.466868
INFO:	nIt= 17    res= 1.444346
INFO:	nIt= 18    res= 1.422161
INFO:	nIt= 19    res= 1.341911
INFO:	nIt= 20    res= 1.315767
TIME:	---> [solve() elapsed 0.266756 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.002160 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 1.2566370614359172, 0.0]
INFO:	----------------------------------------
TIME:	---> [simulate() elapsed 0.295987 s]
INFO:	Difference:
INFO:	x1 : -0.000013
INFO:	x2 : -0.000020
INFO:	x3 : 0.315744
INFO:	x4 : -0.269250
INFO:	--> reached desired accuracy: False
INFO:	########################################
INFO:	       ---- Next Iteration ----
INFO:	########################################
INFO:	# spline parts: 45
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.007540 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.002014 s]
TIME:	---> [initSplines() elapsed 0.019977 s]
INFO:	get new guess for spline x3
TIME:	---> [getGuess() elapsed 0.006983 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.076724 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 2.971371
INFO:	nIt= 2    res= 2.523285
INFO:	nIt= 3    res= 2.432338
INFO:	nIt= 4    res= 2.355152
INFO:	nIt= 5    res= 2.311823
INFO:	nIt= 6    res= 2.276419
INFO:	nIt= 7    res= 2.263778
INFO:	nIt= 8    res= 2.232436
INFO:	nIt= 9    res= 2.207975
INFO:	nIt= 10    res= 2.158644
INFO:	nIt= 11    res= 2.060366
INFO:	nIt= 12    res= 1.947643
INFO:	nIt= 13    res= 1.793869
INFO:	nIt= 14    res= 1.696727
INFO:	nIt= 15    res= 1.644348
INFO:	nIt= 16    res= 1.617806
INFO:	nIt= 17    res= 1.600348
INFO:	nIt= 18    res= 1.586332
INFO:	nIt= 19    res= 1.573295
INFO:	nIt= 20    res= 1.560035
TIME:	---> [solve() elapsed 0.703234 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.003338 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 1.2566370614359172, 0.0]
INFO:	----------------------------------------
TIME:	---> [simulate() elapsed 0.306434 s]
INFO:	Difference:
INFO:	x1 : 0.000050
INFO:	x2 : 0.000007
INFO:	x3 : 0.083411
INFO:	x4 : -0.095957
INFO:	--> reached desired accuracy: False
INFO:	########################################
INFO:	       ---- Next Iteration ----
INFO:	########################################
INFO:	# spline parts: 135
INFO:	########################################
INFO:	#########  Initialise Splines  #########
INFO:	########################################
INFO:	makesteady: x3
TIME:	---> [makesteady() elapsed 0.078428 s]
INFO:	makesteady: x1
TIME:	---> [makesteady() elapsed 0.002239 s]
TIME:	---> [initSplines() elapsed 0.105577 s]
INFO:	get new guess for spline x3
TIME:	---> [getGuess() elapsed 0.029740 s]
INFO:	########################################
INFO:	####  Building the equation system  ####
INFO:	########################################
TIME:	---> [buildEQS() elapsed 0.336565 s]
INFO:	########################################
INFO:	#####  Solving the equation system  ####
INFO:	########################################
INFO:	Run Levenberg-Marquardt method
INFO:	nIt= 1    res= 2.842119
INFO:	nIt= 2    res= 1.837837
INFO:	nIt= 3    res= 0.965902
INFO:	nIt= 4    res= 0.562862
INFO:	nIt= 5    res= 0.518247
INFO:	nIt= 6    res= 0.515588
TIME:	---> [solve() elapsed 0.896525 s]
INFO:	Set spline coefficients
TIME:	---> [setCoeff() elapsed 0.006935 s]
INFO:	########################################
INFO:	##  Solving the initial value problem ##
INFO:	########################################
INFO:	start: [0.0, 0.0, 1.2566370614359172, 0.0]
INFO:	----------------------------------------
TIME:	---> [simulate() elapsed 0.300524 s]
INFO:	Difference:
INFO:	x1 : 0.000014
INFO:	x2 : -0.000015
INFO:	x3 : 0.005384
INFO:	x4 : -0.005454
INFO:	--> reached desired accuracy: True
TIME:	---> [Iteration() elapsed 3.736286 s]
0
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
