.. _candidate_functions:

Candidate functions
-------------------

PyTrajectory uses cubic spline functions as candidates for the approximation of the 
solution. Splines are piecewise polynomials with a global differentiability. 
The connection points :math:`\tau_k` between the polynomial sections are equidistantly 
and are referred to as nodes.

.. math::
   
   t_0 = \tau_0 < \tau_1 < ... < \tau_{\eta} = t_N \qquad h = \frac{t_N - t_0}{\eta}

   \tau_{k+1} = \tau_k + h \quad k = 0,...,\eta-1

The :math:`\eta` polynomial sections can be created as follows.

.. math::

   S_k(t) = c_{k,0}(t-k h)^3 + c_{k,1}(t-k h)^2 + c_{k,2}(t-k h) + c_{k,3} 

   c_{k,l} \in \mathbb{R},\qquad k = 1,...,\eta,\ l = 0,...,3

Then, each spline function is defined by

.. math::
   :nowrap:

   \begin{equation*}
      P_i(t) = 
      \begin{cases}
         S_1(t) & t_0 \leq t < h \\
         \vdots & \vdots \\
         S_k(t) & (k-1)h \leq t < k h \\
         \vdots & \vdots \\
         S_\eta(t) & (\eta-1)h \leq t \leq \eta h
      \end{cases}
   \end{equation*}

In addition to the steadiness the spline functions should be twice steadily differentiable in 
the nodes :math:`\tau`. Therefor, three smoothness conditions can be set up in all 
:math:`\tau_k, k = 1,...,\eta-1`.

.. math::
   :nowrap:

   \begin{eqnarray*}
      S_k(k h) & = & S_{k+1}(k h) \\
      \frac{d}{d t} S_k(k h) & = & \frac{d}{d t} S_{k+1}(k h) \\
      \frac{d^2}{d t^2} S_k(k h) & = & \frac{d^2}{d t^2} S_{k+1}(k h)
   \end{eqnarray*}

In the later equation system these demands result in the block diagonal part of the matrix.
Furthermore, conditions can be set up at the edges arising from the boundary conditions of 
the differential equation system.

.. math::
   :nowrap:

   \begin{equation*}
      \frac{d^j}{d t^j} S_1(\tau_0) = \tilde{\alpha}_j \qquad \frac{d^j}{d t^j} S_\eta(\tau_\eta) = \tilde{\beta}_j \qquad j = 0,...,\nu
   \end{equation*}

The degree :math:`\nu` of the boundary conditions depends on the structure of the differential
equation system. With these conditions and those above one obtains the following equation system
(:math:`\nu = 2`).

.. math::
   :nowrap:
   
   \setcounter{MaxMatrixCols}{20}
   \newcommand\bigzero{\makebox(0,0){\text{\huge0}}}
   \begin{equation*}
   \underbrace{\begin{bmatrix}
         0 & 0   & 0  & 1 &  h^3  & -h^2   &  h & -1 \\
         0 & 0   & 1  & 0 & -3h^2 &  2h    & -1 &  0  &&&& \bigzero \\
         0 & 2   & 0  & 0 &   6h  &  -2    &  0 &  0 \\
           &     &    &   &   0   &   0    &  0 &  1  &  h^3  & -h^2 &  h & -1 \\
           &  \bigzero   &    &   &   0   &   0    &  1 &  0  & -3h^2 &  2h  & -1 &  0 &&&&&& \bigzero \\
           &     &    &   &   0   &   2    &  0 &  0  &   6h  &  -2  &  0 &  0 \\
           &&&&&&&&&&& \ddots \\ 
           &     &    &   &       &        &    &     &       &      &    &    & 0 & 0 & 0 & 1 &  h^3  & -h^2 &  h & -1 \\
           &     &    &   &       &        &  \bigzero  &     &       &      &    &    & 0 & 0 & 1 & 0 & -3h^2 &  2h  & -1 &  0 \\
           &     &    &   &       &        &    &     &       &      &    &    & 0 & 2 & 0 & 0 &   6h  &  -2  &  0 &  0 \\
           &     &    &   &       &        &    &     &       &      &    &    &   & \\
      -h^3 & h^2 & -h & 1 \\
      3h^2 & -2h &  1 & 0 &&&&&&&& \bigzero \\
      -6h  &  2  &  0 & 0 \\
           &     &    &   &       &        &    &     &       &      &    &    &   &   &   &   &   0   &    0 &  0 &  1 \\
           &     &    &   &       &        &  \bigzero  &     &       &      &    &    &   &   &   &   &   0   &    0 &  1 &  0 \\
           &     &    &   &       &        &    &     &       &      &    &    &   &   &   &   &   0   &    2 &  0 &  0 \\
   \end{bmatrix}}_{=: \boldsymbol{M}}
   \cdot
   \underbrace{\begin{bmatrix}
      c_{1,0} \\ c_{1,1} \\ c_{1,2} \\ c_{1,3} \\ \\ \vdots \\ \\ \vdots \\ \\ \vdots \\ \\ \vdots \\ \\ \vdots \\ \\ c_{\eta,0} \\ c_{\eta,1} \\ c_{\eta,2} \\ c_{\eta,3}
   \end{bmatrix}}_{=: \boldsymbol{c}}
    =
   \underbrace{\begin{bmatrix}
      0 \\ 0 \\ 0 \\ 0 \\ 0 \\ 0 \\ \vdots  \\ 0 \\ 0 \\ 0 \\ \\ \tilde{\alpha}_0 \\ \tilde{\alpha}_1 \\ \tilde{\alpha}_2 \\ \tilde{\beta}_0 \\ \tilde{\beta}_1 \\ \tilde{\beta}_2
   \end{bmatrix}}_{=: \boldsymbol{r}}
   \end{equation*}

The matrix :math:`\boldsymbol{M}` of dimension :math:`N_1 \times N_2,\ N_1 < N_2`, where :math:`N_2 = 4 \eta` and :math:`N_1 = 3(\eta - 1) + 2(\nu + 1)`, can be decomposed 
into two subsystems :math:`\boldsymbol{A}\in \mathbb{R}^{N_1 \times (N_2 - N_1)}` and :math:`\boldsymbol{B}\in \mathbb{R}^{N_1 \times N_1}`.
The two dies are the vectors :math:`\boldsymbol{a}` and :math:`\boldsymbol{b}` with the respective coefficients of :math:`\boldsymbol{c}`.

.. math::
   :nowrap:

   \begin{eqnarray*}
      \boldsymbol{M} \boldsymbol{c} & = & \boldsymbol{r} \\
      \boldsymbol{A} \boldsymbol{a} + \boldsymbol{B} \boldsymbol{b} & = & \boldsymbol{r} \\
      \boldsymbol{b} & = & \boldsymbol{B}^{-1} (\boldsymbol{r} - \boldsymbol{A} \boldsymbol{a})
   \end{eqnarray*}

With this allocation, the system of equations can be solved for :math:`\boldsymbol{b}` and the parameters in :math:`\boldsymbol{a}`
remain as the free parameters of the spline function.
